#!/bin/sh
#  $Id$
#  $Revision$
#  $Date$
#  $Author$
#  $HeadURL$

#
# Linux init script for the Apache Tomcat servlet container.
#
# chkconfig: 2345 96 96
# description: The Apache Tomcat servlet container.
# processname: tomcat
# config: /opt/tomcat/conf/tomcat-env.sh
#
# Copyright (c) 2007 Jason Brittain <jason.brittain@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# ----------------------------------------------------------------------
# $Id$
#
# Author: Jason Brittain <jason.brittain@gmail.com>

# Source function library.
if [ -x /etc/rc.d/init.d/functions ]; then
. /etc/rc.d/init.d/functions
fi

if [ -x /opt/tomcat/bin/variablesparser.sh ]; then
    . /opt/tomcat/bin/variablesparser.sh
fi

APP_ENV="/opt/tomcat/conf/tomcat-env.sh"

# Source the app config file, if it exists.
[ -r "$APP_ENV" ] && . "${APP_ENV}"

# The path to the Tomcat start/stop script.
TOMCAT_SCRIPT=$CATALINA_HOME/bin/catalina.sh

# The name of this program.
PROG="$0"

# Resolve links - $0 may be a soft link.
while [ -h "$PROG" ]; do
    ls=`ls -ld "$PROG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '.*/.*' > /dev/null; then
        PROG="$link"
    else
        PROG=`dirname "$PROG"`/"$link"
    fi
done

PROG="`basename $PROG`"
HA=$([ $(LC_ALL=C chkconfig --list vtund | grep -o "3:on") ] && { echo on; } || { echo off; })

# If TOMCAT_USER is not set, use "tomcat".
if [ -z "$TOMCAT_USER" ]; then
    TOMCAT_USER="tomcat"
fi

# Since the daemon function will run $TOMCAT_SCRIPT, no environment
# stuff should be defined here anymore.  Please use the
# /opt/tomcat/conf/tomcat-env.sh file instead.

SERVERXML="/opt/tomcat/conf/server.xml"
let RETVAL=0
JVM_PID="0"
JVM_RUNNING="false"


#################### Hivext mod #####################

TOMCAT_HOME='/opt/tomcat'
TOMCAT_MEMORY_CONF='conf/tomcat-env.sh'

clean_env(){
        $SED -i -e "/^JAVA_OPTS/s/-XX:-UseAdaptiveSizePolicy/ /g" ${TOMCAT_HOME}/${TOMCAT_MEMORY_CONF}
        $SED -i -e "/^JAVA_OPTS/s/-XX:[-+]UseCompressedOops/ /g" ${TOMCAT_HOME}/${TOMCAT_MEMORY_CONF}
        $SED -i -e "/^JAVA_OPTS/s/-Xmaxf[[:digit:]\.]\{1,\}/ /g" ${TOMCAT_HOME}/${TOMCAT_MEMORY_CONF}
        $SED -i -e "/^JAVA_OPTS/s/-Xminf[[:digit:]\.]\{1,\}/ /g" ${TOMCAT_HOME}/${TOMCAT_MEMORY_CONF}
        $SED -i -e "/^JAVA_OPTS/s/-XX:MaxPermSize\=256m/ /g" ${TOMCAT_HOME}/${TOMCAT_MEMORY_CONF}
        $SED -i -e "/^JAVA_OPTS/s/-XX:[-+]Use[[:alnum:]]\{1,\}GC/ /g" ${TOMCAT_HOME}/${TOMCAT_MEMORY_CONF}
}


generateOptimalSettings(){
        clean_env;
        GC_LIMMIT=8000;
        [ -z "$XMS" ] && { XMS=32M; }
        [ -z "$XMN" ] && { XMN=30M; }
        local memory_total=`free -m | grep Mem | awk '{print $2}'`;
        [ -z "$XMX" ] && {
            let XMX=memory_total-35;
            XMX="${XMX}M";
        }
        [ -z "$GC" ] && {
           [ "$memory_total" -ge "$GC_LIMMIT" ] && GC="-XX:+UseG1GC" || GC="-XX:+UseParNewGC";
        }

        if ! `echo $confresult | grep -q "\-Xminf[[:digit:]\.]"`
        then
              confresult=$confresult" -Xminf0.1"
        fi
        if ! `echo $confresult | grep -q "\-Xmaxf[[:digit:]\.]"`
        then
              confresult=$confresult" -Xmaxf0.3"
        fi
        if ! `echo $confresult | grep -q "\-XX:MaxPermSize"`
        then
              confresult=$confresult" -XX:MaxPermSize=256m "
        fi
        if ! `echo $confresult | grep -q "UseCompressedOops"`
        then
              confresult=$confresult" -XX:+UseCompressedOops"
        fi
         confresult=$confresult" $GC"

}

updateMemoryConfig(){
        count=`$GREP -e "^JAVA_OPTS" ${TOMCAT_HOME}/${TOMCAT_MEMORY_CONF} |$GREP -c -e $2`
        if [ "$count" -eq 1 ]
        then
                $SED -i -e "/^JAVA_OPTS/s/$2/$1 /" -e '/^JAVA_OPTS/s/ \{1,\}/ /g' ${TOMCAT_HOME}/${TOMCAT_MEMORY_CONF}
        else
                $SED -i "/^JAVA_OPTS/s/\"/\"$1\ /" ${TOMCAT_HOME}/${TOMCAT_MEMORY_CONF}
        fi
}

setOpts(){
        generateOptimalSettings;
        [ ! -z "$XMX" ] && updateMemoryConfig "-Xmx$XMX" "-Xmx[[:digit:]]\{1,\}[MGkKmg[:space:]]"
        [ ! -z "$XMS" ] && updateMemoryConfig "-Xms$XMS" "-Xms[[:digit:]]\{1,\}[MGkKmg[:space:]]"
        [ ! -z "$XMN" ] && updateMemoryConfig "-Xmn$XMN" "-Xmn[[:digit:]]\{1,\}[MGkKmg[:space:]]"

}



start() {
    setOpts;
    [ -r "$APP_ENV" ] && . "${APP_ENV}";
    if [[ "$HA" == "on"  ]]; then
        while :
        do
                CURTAPIP=$(ifconfig tap | sed -ne '/inet\s\+addr:\s*/{s/.*addr:\(\([0-9]\{1,3\}\.\?\)\{4\}\).*/\1/i;p;};h;')
                [ -n "$CURTAPIP" ] && break || { sleep 2; continue; }
        done
	magicnum1=`echo $CURTAPIP | awk -F '.' '{ print $4 }'`
	magicnum2=`echo $CURTAPIP | awk -F '.' '{ print $3 }'`
	magicport=`echo $(((($magicnum1/32)*32)+$magicnum2+45000))`
        sed -i "s/MAGICPORT[\=\"\.[:digit:]]\{0,\}$/MAGICPORT=\"$magicport\"/g" $APP_ENV
        sed -i "s/^VTUNIP[\=\"\.[:digit:]]\{0,\}$/VTUNIP=\"$CURTAPIP\"/" $APP_ENV
	[ -r "$APP_ENV" ] && . "${APP_ENV}"

    fi

   #####################################################
    #for enable autostart
    #unstopped=$(rm -f /home/scripts/tomcat_stopped)
    echo -n "Starting $PROG: "

    checkJvmRunning
    if [ "$JVM_RUNNING" == "true" ]; then
        echo -n "\"$JVM_ID\" JVM process already running. "
    else
        # Raise the process's maximum number of file descriptors to 4096.
        ulimit -n 4096

        # Exit with an explanation if our JAVA_HOME isn't found.
        if [ ! -d "$JAVA_HOME" ]; then
            echo "JAVA_HOME of $JAVA_HOME not found."
            echo "See ${APP_ENV}"
            if [ -x /etc/rc.d/init.d/functions ]; then
                echo -n "Starting $PROG: "
                echo_failure
                echo
            fi
            return 1
        fi

        # Start Tomcat, running as the $TOMCAT_USER.
        if [ "$USER" == "$TOMCAT_USER" ]; then
            # We're already the $TOMCAT_USER so just exec the script. JAVA_OPTS=$JAVA_OPTS$confresult ;
            exec bash -c "set -a; . $APP_ENV;$TOMCAT_SCRIPT start" \
                >/dev/null 2>&1
        else
            if [ -f /etc/rc.d/init.d/functions -a -x /sbin/runuser ]; then

                runuser -s /bin/bash - $TOMCAT_USER \
                    -c "set -a; . $APP_ENV;export  JAVA_OPTS=\"$JAVA_OPTS$confresult\";$TOMCAT_SCRIPT start" &>/dev/null
            else
                su - $TOMCAT_USER -c "/bin/bash -c \
                    \"set -a; . $APP_ENV;export  JAVA_OPTS=\"$JAVA_OPTS$confresult\";$TOMCAT_SCRIPT start\"" \
                    >/dev/null 2>&1
            fi
        fi

        let RETVAL=$?

        # If the return value is zero, then the attempt to start it is
        # good so far.
        if [ $RETVAL -eq 0 ]; then
            # Sleep some seconds while Tomcat begins to start, then check it.
            sleep 7
            checkJvmRunning
            if [ "$JVM_RUNNING" == "false" ]; then
                let RETVAL=1
            fi
        fi
    fi

    # Output "[  OK  ]" or "[  FAILED  ]"
    if [ $RETVAL -eq 0 ]; then
        if [ -x /etc/rc.d/init.d/functions ]; then
            echo_success
            echo
        else
            echo "[  OK  ]"
        fi
    else
        if [ -x /etc/rc.d/init.d/functions ]; then
            echo_failure
            echo
        else
            echo "[  FAILED  ]"
        fi
    fi

    return $RETVAL
}

stop() {
   #for disable autostart 
   #stopped_=$(echo '1' >  /home/scripts/tomcat_stopped)
    echo -n "Stopping $PROG: "

    checkJvmRunning
    if [ "$JVM_RUNNING" == "true" ]; then

        # Exit with an explanation if our JAVA_HOME isn't found.
        if [ ! -d "$JAVA_HOME" ]; then
            echo "JAVA_HOME of $JAVA_HOME not found."
            echo "See ${APP_ENV}"
            echo -n "Stopping $PROG: "
            if [ -x /etc/rc.d/init.d/functions ]; then
                echo_failure
                echo
            else
                echo "[  FAILED  ]"
            fi
            return 1
        fi

        # Stop Tomcat, running as the $TOMCAT_USER.  We also unset any
        # JVM memory switches -- the stop client shouldn't start with those.
        if [ "$USER" == "$TOMCAT_USER" ]; then
            # We're already the $TOMCAT_USER so just exec the script.
            exec bash -c "set -a; . $APP_ENV; shopt -s extglob; \
                export JAVA_OPTS=\"\${JAVA_OPTS//-Xm[sx]+([0-9])[mM]}\"; \
		export JAVA_OPTS=\"\${JAVA_OPTS//-javaagent*jar}\"; \
                shopt -u extglob; $TOMCAT_SCRIPT stop" &>/dev/null
        else
            if [ -x /etc/rc.d/init.d/functions -a -x /sbin/runuser ]; then
                runuser -s /bin/bash - $TOMCAT_USER \
                    -c "set -a; . $APP_ENV; shopt -s extglob; \
                    export JAVA_OPTS=\"\${JAVA_OPTS//-Xm[sx]+([0-9])[mM]}\"; \
		    export JAVA_OPTS=\"\${JAVA_OPTS//-javaagent*jar}\"; \
                    shopt -u extglob; $TOMCAT_SCRIPT stop" &>/dev/null
            else
                su - $TOMCAT_USER -c "/bin/bash -c \
                    \"set -a; . $APP_ENV; shopt -s extglob; \
                    export JAVA_OPTS=\"\${JAVA_OPTS//-Xm[sx]+([0-9])[mM]}\"; \
	            export JAVA_OPTS=\"\${JAVA_OPTS//-javaagent*jar}\"; \                    
		    shopt -u extglob; $TOMCAT_SCRIPT stop\"" &>/dev/null
            fi
        fi

        let RETVAL=$?

        if [ $RETVAL -eq 0 ]; then

            checkJvmRunning
            if [ "$JVM_RUNNING" == "true" ]; then

                # Loop here until either Tomcat shuts down on its own, or
                # until we've waited longer than SHUTDOWN_WAIT seconds.
                let count=0
                until [ "`ps --pid $JVM_PID | grep -c $JVM_PID`" == "0" ] ||
                      [ $count -gt $SHUTDOWN_WAIT ]
                do
                    if [ $count -eq 0 ]; then
                        echo
                    fi
                    echo "Waiting for processes to exit.."
                    sleep 1
                    let count=$count+1
                done

                if [ $count -gt $SHUTDOWN_WAIT ]; then
                    # Tomcat is still running, so we'll send the JVM a
                    # SIGTERM signal and wait again.
                    echo "Sending the Tomcat processes a SIGTERM asking them" \
                         "to shut down gracefully.."
                    /bin/kill -s SIGTERM $JVM_PID &>/dev/null

                    # Loop here until either Tomcat shuts down on its own, or
                    # until we've waited longer than SHUTDOWN_WAIT seconds.
                    let count=0
                    until [ "`ps --pid $JVM_PID | grep -c $JVM_PID`" \
                          == "0" ] || [ $count -gt $SHUTDOWN_WAIT ]
                    do
                        echo "Waiting for processes to exit.."
                        sleep 1
                        let count=$count+1
                    done

                    if [ $count -gt $SHUTDOWN_WAIT ]; then
                        # Tomcat is still running, and just won't shut down.
                        # We'll kill the JVM process by sending it a SIGKILL
                        # signal and wait again for the JVM process to die.
                        echo "Killing processes which didn't stop after" \
                         "$SHUTDOWN_WAIT seconds."
                        /bin/kill -s SIGKILL $JVM_PID &>/dev/null

                        # Loop here until either Tomcat shuts down on its own,
                        # or until we've waited longer than SHUTDOWN_WAIT
                        # seconds.
                        let count=0
                        until [ "`ps --pid $JVM_PID | grep -c $JVM_PID`" \
                              == "0" ] || [ $count -gt $SHUTDOWN_WAIT ]
                        do
                            echo "Waiting for processes to exit.."
                            sleep 1
                            let count=$count+1
                        done

                        if [ $count -gt $SHUTDOWN_WAIT ]; then
                            # The JVM process won't shut down even with a
                            # SIGKILL, so there is something really wrong.
                            echo "The \"$JVM_ID\" JVM process is wedged and" \
                                "won't shut down even when it is"
                            echo "sent a SIGKILL."
                            echo "Process ID $JVM_PID."

                            # Right here we may want to email an administrator.

                            let RETVAL=1
                        fi
                    fi

                    # We need to sleep here to make sure the JVM process dies.
                    sleep 2
                fi
            fi
        fi
    fi

    # Output "[  OK  ]" or "[  FAILED  ]"
    if [ $RETVAL -eq 0 ]; then
        if [ -x /etc/rc.d/init.d/functions ]; then
            echo_success
            echo
        else
            echo "[  OK  ]"
        fi
    else
        if [ -x /etc/rc.d/init.d/functions ]; then
            echo_failure
            echo
        else
            echo "[  FAILED  ]"
        fi
    fi

    return $RETVAL
}

getJvmPid() {
    JVM_PID="`ps awwx | grep \"jvm=$JVM_ID \" | grep -v grep | head -n 1 | \
        cut -c -5`"
}

checkJvmRunning() {
    getJvmPid
    if [ "$JVM_PID" != "" ]; then
        JVM_RUNNING="true"
    else
        JVM_RUNNING="false"
    fi
}

# See how we were called.
case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        stop
        if [ $RETVAL -eq 0 ]; then
            start
        fi
        ;;
    status)
        SERVICE_NAME="$PROG"
        checkJvmRunning
        if [ "$JVM_RUNNING" == "true" ]; then
            echo "$SERVICE_NAME (pid $JVM_PID) is running."
            let RETVAL=0
        else
            echo "$SERVICE_NAME is not running."
            let RETVAL=1
        fi
        exit $RETVAL
        ;;
    condrestart)
        # If it's already running, restart it, otherwise don't start it.
        checkJvmRunning
        if [ "$JVM_RUNNING" == "true" ]; then
            stop
            if [ $RETVAL -eq 0 ]; then
                start
            fi
        fi
        ;;
    *)
        echo "Usage: $PROG {start|stop|restart|status|condrestart}"
        let RETVAL=1
        exit $RETVAL
esac

exit $RETVAL
